# Generated
fragment ProductCustomMetafields on Product {
  metafields(identifiers: [
        {namespace: "custom", key: "marble_fixture"},
        {namespace: "custom", key: "material"},
        {namespace: "custom", key: "size"},
        {namespace: "custom", key: "length"},
        {namespace: "custom", key: "width"},
        {namespace: "custom", key: "height"},
        {namespace: "custom", key: "mirror_glass_type"},
        {namespace: "custom", key: "wood_type"},
        {namespace: "custom", key: "marble_type"},
        {namespace: "custom", key: "metal_finish"},
        {namespace: "custom", key: "option"},
        {namespace: "custom", key: "oled_exchange_panel"},
        {namespace: "custom", key: "surcharge"},
        {namespace: "custom", key: "diameter"},
        {namespace: "custom", key: "table_top"},
        {namespace: "custom", key: "dichroic_glass"},
        {namespace: "custom", key: "ceiling_cap"},
        {namespace: "custom", key: "plug_type"},
        {namespace: "custom", key: "measurements"},
        {namespace: "custom", key: "teaser_duo_top"},
        {namespace: "custom", key: "teaser_duo_bottom"},
        {namespace: "custom", key: "hero_split_images"},
        {namespace: "custom", key: "hero_split_text"},
        {namespace: "custom", key: "hero_split_images_right"},
        {namespace: "custom", key: "teaser_duo_bottom_right"},
        {namespace: "custom", key: "teaser_duo_top_right"},
        {namespace: "custom", key: "materialBoolean"},
        {namespace: "custom", key: "product_tile"},
        {namespace: "custom", key: "metal_color"},
        {namespace: "custom", key: "cable_color"},
        {namespace: "custom", key: "frame_color"},
        {namespace: "custom", key: "glass_color"},
        {namespace: "custom", key: "neo_color_product"}
  ]) {
    namespace
    key
    type
    value
    reference {
      __typename
      ... on Metaobject { id type handle fields { key type value } }
      ... on MediaImage { image { url altText } }
      ... on Video { sources { url mimeType } }
      ... on Model3d { sources { url mimeType } }
      ... on GenericFile { url mimeType }
    }
  }
}
